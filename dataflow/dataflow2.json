{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTablePET",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeBreed",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable7",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeBreed",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMALS_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK), 0) AS MaxBreedSK \\nFROM BREED_DIM_1\\n',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          BREED_SK as string,",
				"          START_DT as string,",
				"          END_DT as string,",
				"          IS_CURRENT as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source1, source2 join(true()",
				",",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     LICENSE_ISSUE_DATE = count(LICENSE_ISSUE_DATE) ) ~> aggregate1",
				"aggregate1, source3 join(SPECIES == SPECIES_NAME",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 filter(isNull(SPECIES_NAME) && isNull(PRIMARY_BREED_NAME) && isNull(SECONDARY_BREED_NAME)",
				") ~> filter1",
				"filter1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BREED_SK = RowNum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          START_DT as string,",
				"          END_DT as string,",
				"          IS_CURRENT as string,",
				"          BREED_DK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          START_DT,",
				"          END_DT,",
				"          IS_CURRENT,",
				"          SPECIES_NAME,",
				"          PRIMARY_BREED_NAME,",
				"          SECONDARY_BREED_NAME",
				"     )) ~> sink1"
			]
		}
	}
}